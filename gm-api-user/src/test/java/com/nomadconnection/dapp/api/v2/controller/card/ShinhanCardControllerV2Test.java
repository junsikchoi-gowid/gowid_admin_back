package com.nomadconnection.dapp.api.v2.controller.card;

import com.nomadconnection.dapp.api.abstracts.AbstractWebMvcTest;
import com.nomadconnection.dapp.api.dto.CardIssuanceDto;
import com.nomadconnection.dapp.api.exception.BadRequestedException;
import com.nomadconnection.dapp.core.domain.cardIssuanceInfo.CardType;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

class ShinhanCardControllerV2Test extends AbstractWebMvcTest {


	@Test
	@Transactional
	void application() throws Exception {

		mockMvc.perform(
			post(ShinhanCardControllerV2.URI.BASE + ShinhanCardControllerV2.URI.APPLY)
				.param("cardIssuanceInfoIdx", "968")
				.param("signedBinaryString", "")
				.param("payAccount", "")
				.param("userIdx", "487")
				.param("cardType", CardType.KISED.toString())
				.header("Authorization", "Bearer " + getToken())
				.characterEncoding("UTF-8")
		)
			.andDo(print())
			.andExpect(status().isOk());

	}


	@Test
	@Transactional
	@DisplayName("창진원 과제번호 검증 API")
	void shouldReturnKisedResponseDtoWhenRequestProjectId() throws Exception {
		String token = getToken();
		String projectId = "10375033";
		String licenseNo = "2618125793";

		mockMvc.perform(
			get(ShinhanCardControllerV2.URI.BASE + ShinhanCardControllerV2.URI.PROJECT_ID)
				.param("licenseNo", licenseNo)
				.param("projectId", projectId)
				.param("cardIssuanceInfoIdx", "1007")
				.header("Authorization", "Bearer " + token)
				.characterEncoding("UTF-8")
		)
			.andDo(print())
			.andExpect(jsonPath("$.projectId").value(projectId))
			.andExpect(jsonPath("$.licenseNo").value(licenseNo))
			.andExpect(status().isOk());
	}

	@Test
	@DisplayName("창진원 최종선정 확인서 업로드")
	@Transactional
	void shouldGetStatusOKWhenUploadConfirmation() throws Exception {

		MockMultipartFile multipartFile = new MockMultipartFile("file", "test.pdf", "multipart/form-data", "some data".getBytes());

		mockMvc.perform(
			multipart(ShinhanCardControllerV2.URI.BASE + ShinhanCardControllerV2.URI.CONFIRMATION)
				.file(multipartFile)
				.param("projectId", "12345678")
				.header("Authorization", "Bearer " + getToken())
				.characterEncoding("UTF-8")
		)
			.andDo(print())
			.andExpect(status().isOk());
	}

	@Test
	@DisplayName("창진원 최종선정 확인서 허용되지 않은 확장자 업로드 시 예외 발생")
	@Transactional
	void shouldGet400ErrorWhenNotAllowedExtensionUploadConfirmation() throws Exception {

		MockMultipartFile multipartFile = new MockMultipartFile("file", "test.jpg", "multipart/form-data", "some data".getBytes());

		mockMvc.perform(
			multipart(ShinhanCardControllerV2.URI.BASE + ShinhanCardControllerV2.URI.CONFIRMATION)
				.file(multipartFile)
				.param("projectId", "12345678")
				.header("Authorization", "Bearer " + getToken())
				.characterEncoding("UTF-8")
		)
			.andDo(print())
			.andExpect(status().is4xxClientError())
			.andExpect(jsonPath("$.error")
				.value(BadRequestedException.Category.NOT_ALLOWED_EXTENSION.toString()));
	}

}
